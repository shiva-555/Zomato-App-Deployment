pipeline {
    agent any

    tools {
        jdk 'jdk17'
        nodejs 'NodeJS-23'
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }

    stages {
        stage("Clean Workspace") {
            steps {
                cleanWs()
            }
        }

        stage("Checkout Code") {
            steps {
                checkout scm
            }
        }

        stage("Debug Workspace Structure") {
            steps {
                script {
                    sh "ls -la"
                    sh "ls -la front-end"
                    sh "ls -la Cart"
                    sh "ls -la Product"
                    sh "ls -la User"
                }
            }
        }

        stage("Install Dependencies - Frontend") {
            steps {
                dir('front-end') {
                    sh 'npm install'
                }
            }
        }

        stage("Install Dependencies - Backend Services") {
            steps {
                script {
                    def services = ['Cart', 'Product', 'User']
                    for (svc in services) {
                        dir(svc) {
                            sh 'npm install'
                        }
                    }
                }
            }
        }

        stage("SonarQube Analysis") {
            steps {
                script {
                    def projects = ['front-end', 'Cart', 'Product', 'User']
                    for (project in projects) {
                        dir(project) {
                            withSonarQubeEnv('sonar-server') {
                                sh '''$SCANNER_HOME/bin/sonar-scanner \
                                    -Dsonar.projectName=''' + project + ''' \
                                    -Dsonar.projectKey=''' + project + ''' \
                                    -Dsonar.sources=.'''
                            }
                        }
                    }
                }
            }
        }

        stage('OWASP Dependency Check') {
            steps {
                script {
                    def paths = ['front-end', 'Cart', 'Product', 'User']
                    for (path in paths) {
                        dir(path) {
                            dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit -n', odcInstallation: 'DP-Check'
                        }
                    }
                }
            }
        }

        stage("Trivy Scan") {
            steps {
                script {
                    def paths = ['front-end', 'Cart', 'Product', 'User']
                    for (path in paths) {
                        dir(path) {
                            sh "trivy fs . > trivy-${path}.txt"
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline completed (success, failure, or abort)"
        }
        success {
            echo "Pipeline completed successfully"
        }
        failure {
            echo "Pipeline failed"
        }
    }
}
